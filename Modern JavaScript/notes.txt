Notes on Javascript:

Javascript is a high-level interpreted programming language. It can run without running through a compiler.
It has a lot of abstraction, differentiating it from low-level languages. It can run in both the browser/client as 
well as server side. It conforms to ECMA Specification. (ES6 or ES2015)

It is a currently growing full-stack platform with cross-browser support. It is a core element of things like React and 
GraphQL. JavaScript is very versatile, it can run pretty much anywhere. 

The path of JavaScript is as follows:

Non-standard HTML Supplement -> jQuery -> Node.js -> React -> ECMAScript

Characteristics: 

Functions are first-class citizens
Functions can…
• Be the only thing in a file
• Be mapped to a dictionary key
• Have properties and methods representing a class

Higher order functions are:
• Functions that receive or return a function
• There are many uses throughout the language

JavaScript also has automatic type coercion which means variables types are set 
by whatever the variable is initialized as

<<this>> keyword represents the context of which the function will execute and can vary

Arrow function expressions are:

Shorthand notation for regular function expression
• Doesn’t have its own bindings to this, arguments, super keywords

Example: 

<<
const sumTwo = (n1, n2) => n1 + n2
>>

is equivalent to 

<<
function sumTwo(n1, n2) {
    return n1 + n2;
}
>>

Classes: (Important aspects of ES6) 

The class keyword is used to initialize a class. The main difference is that there is a lack of
private members in the 


Variables: 

Var:
    Function scoped
    Undefined when accessing a variable before declaration

Const:
    Block scoped
    ReferenceError when accessing before declaration
    Cannot be reassigned

Let:
    Block scoped 
    ReferenceError when accessing before declaration

JavaScript uses hoisting which means you can use variables before declaration. JavaScript tosses the declaration of 
variables to the top of the file when interpreting. This can lead to bad coding practices. A way to avoid these problems
is to use Const or Let to avoid hoisting and common pitfalls.


Hoisting: 
Variable, function, and class declarations are "moved to the top" of their scope. 

Closure: 
A closure is the comvination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment)
RESEARCH MORE ON This

Asynchronous JavaScript:

JS is a synchronous, blocking, single-threaded language, which means only one operation can be in progress at a time.
But there are ways of making it behave asynchronously.

3 common approaches are:
    Callbacks
    Promises
    Async/Await

Callbacks: 

A callback is a function that gets passed to another function as a parameter, which can then be executed as necessary.

