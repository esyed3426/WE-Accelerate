Overview:

The content today spans VS Code, which is to be used as our 'default' environment, and Postman, which is to be used for creating
and exporting HTTP requests in JSON (JavaScript Object Notation). 


Notes on VS Code: 


VS Code is generally used as a multi-purpose text editor, and has built-in support for Git, as well as hundreds of languages, which is 
why it is so commonplace. It also supports a wide range of extensions to help out with other things (Public Extensibility Model).

A list of extensions that we will be using are:

(ES Lint - Integrates ES Lint JavaScript into VS Code)
(npm - Runs npm scripts defined in the package.json file and validates the installed modules against the dependencies defined in package.json)  

(NPM IntelliSense - Autocompletes npm modules in import statements)   

(DotENV - Adds support for .env file syntax)   

(EditorConfig - Adds EditorConfig Support for Visual Studio Code)    

(GraphQL for VSCode - GraphQL syntax highlighting, linting, auto-complete, etc...)   

(Debugger for Chrome - Debugs JavaScript code in the Chrome browser, or any other target that supports the Chrome Debugger protocol)   

(E S7 React/Redux/GraphQL/React-Native snippets - Adds snippets for React, Redux and Graphql in JS/TS with ES7 syntax)    

(SQL Server (mssql) - Adds support for SQL development)    

(TDD Snippets - Adds TDD Snippets for writing tests quickly)


Other Notes:  


Set the default shell to bash, for ease in using the command line in future. 

Extensions can be installed manually, by using the Extensions tab on the left side of the UI, or from the command line. 

To setup installation from the command line, we must first access the command pallette, (⇧⌘P), and type "Shell Command: Install 'code' Command in Path" 

From then on, extensions can be installed using the "code --install-extension {extensionName}" directly from the command line, take care in using the correction extension name otherwise errors could be encountered  


Notes on Postman


Postman is used for API development, creating HTTP requests (GET, POST, FETCH, etc...), setting up Collections (Groups of saved requests), and for segregating multiple projects. It can also be used to easily export Collections in JSON format. Also supports environment variables to simplify the creation of HTTP requests, using double brackets, ex: {{environmentVariableName}}...  

The procedure for creating a new Collection with some requests is as follows: 

Open Postman, go to New -> Collection, and rename it to something of your choice. Add requests into it using the New -> Request and then 
specify which type. 

HTTP Requests:

GET -> Input the URL. The params set should auto populate. Hit SEND to send and if the destination exists, it should return a 200 OK code.
POST -> Input the URL. Click the Body tab and select Raw. From the dropdown, select JSON. Add a JSON test object and send it. It should also return a 200 OK Code.

Environment Variables: 

Environment variables are of text form, and can be used in URLS using double brackets {{environmentVariableName}}. To create a new 
environment variable, click the eye under the top right corner, then add a variable. You give it a name, then an initial and current value,
sometimes, the current value auto-populates. When updating the initial value, also update the current value as it does not auto update. 





