Notes for REST. 

Documentation is very important. APIs are often undocumented for some reason. 

Interface - User Interface -> THe portion of an application that is exposed to the outisde world for users to interact with

API - Application Programming Interface

Think about APIs as the public entry points into a system. 

Their audiences are developers or other applications. 
APIS are generally a collection of functions or methods with known signatures and data models that 
can garner data for you. 

Different types of APIs:
    Libraries and Frameworks:
        Software Libraries

    Operation Systems:
        Specifies the interface between and application and the operating system

    Web Services:
        The interface for one application to exchange data with another over the Web


We will will be focusing on web services and web APIs. 

Message Protocol vs Transport Protocol

Message Protocol:
    Structure and format of messages
    Ex. SOAP (Simple Object Access Protocol)

Transport Protocol:
    Exchange of messages
    Ex. HTTP, WebSocket, TCP WebSocket

What is a REST API?

REST stands for REpresentational State Transfer

It has an architectural style for sharing data between applications and is comprised of 6 architectural constraints.
Implemented over HTTP. 

REST is comprised of:
    Services
    Resources
    Representations
    Verbs

The 6 Architectural constraints of rest:

Uniform Interface:
    Define the interface between the client and the server
    Simplifies and decouples architecture
    Restful design
        HTTP verbs (e.g. GET, PUT, POST, DELETE)
    
Stateless:
    The server does not remember anything about the user using the API
    Each individual request contains all the information the server needs to perform the request
    and return a response, regardless of other requests made by the same API user

Client-Server Separation:
    The client and server act independenly, each on its own
    Interaction between them is only in the form of requests, initiated by the client only
    The server only responds in reaction to a request from a client

Cacheable:
    Server resopnse contains information about whether or not the data is Cacheable
    Client can avoid requestion the same data multiple times
    Client should know when the current version of the data expires

Layered System:
    Between the client who requests a resource and the server who responds, there might be a number of servers in the middle
    These servers might provide a security layer, caching layer, load-balancing layer or other functionality
    Additional layers should not affect request or response

Code-on-demand:
    Client can request code from the server, usually in the form of a script
    The client can then execute that code







