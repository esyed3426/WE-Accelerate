GraphQL is a flexible layer that sits on top of all your data sources. 
Fields from different sources can be mixed and matched in a query.
Retrieve only the data you need and nothing else. 

This limits how much information is actually returned 

GraphQL is a query language for APIs and a utility to retrieve data using a declarative type system to define data.

It covers:
    Queries and mutations
    Schemas and types
    Resolvers
    Validation
    Execution

Example: Libraries, Members + Books

GraphQL is about asking for specific fields on objects.
You can use arguments in your queries. 

GraphQL is used for optimizing significant volumes of data being transferred across the internet.

Mutations are used to create or update data within your service. You use the mutation keyword and then give it a name.

We use the GraphQL language schema to remain language-agnostic. 
Object types are the basic components of a GraphQL schema. An Object has fields.
Fields can be set to Object or Scalar types: Int, Float, String, Boolean, ID.
All fields must eventually resolve into a Scalar. 

Each field of a query is backed by a resolver, a function that returns the data needed for that field.
Resolvers take 4 arguments: parent, args, context, info.

GraphQL queries are validated using GraphQLs type system
In the interactive GraphQL playground, you will get errors and helpful messages to fix them.

